generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String        @id @default(uuid())
  about       String
  name        String
  nickname    String
  phone       String
  photo       String
  password    String
  status      String
  description String?
  online      Boolean?
  color       String?
  follows     Followed[]
  followers   Follower[]
  likes       Liked[]
  Message     Message[]
  posts       Post[]
  saves       Saved[]
  chats       ChatToUsers[]
  fcmTokens   FCMToken[]
}

model FCMToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  device    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            String    @id @default(uuid())
  userId        String?
  photo         String
  userPhoto     String?
  nickname      String?
  name          String?
  likesCount    String
  commentsCount String
  status        String?
  publishedAt   DateTime  @default(now())
  comments      Comment[]
  User          User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Post_userId_fkey")
}

model Comment {
  id       String  @id @default(uuid())
  postId   String?
  name     String?
  nickname String?
  text     String
  savedId  String?
  likedId  String?
  Liked    Liked?  @relation(fields: [likedId], references: [id])
  Post     Post?   @relation(fields: [postId], references: [id])
  Saved    Saved?  @relation(fields: [savedId], references: [id])

  @@index([likedId], map: "Comment_likedId_fkey")
  @@index([postId], map: "Comment_postId_fkey")
  @@index([savedId], map: "Comment_savedId_fkey")
}

model Follower {
  id         String  @id @default(uuid())
  followerId String?
  userId     String?
  User       User?   @relation(fields: [userId], references: [id])

  @@index([userId], map: "Follower_userId_fkey")
}

model Followed {
  id         String  @id @default(uuid())
  followedId String?
  userId     String?
  User       User?   @relation(fields: [userId], references: [id])

  @@index([userId], map: "Followed_userId_fkey")
}

model Saved {
  id      String    @id @default(uuid())
  userId  String?
  postId  String?
  Comment Comment[]
  User    User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Saved_userId_fkey")
}

model Liked {
  id      String    @id @default(uuid())
  userId  String?
  postId  String?
  Comment Comment[]
  User    User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Liked_userId_fkey")
}

model Chat {
  id          String        @id @default(uuid())
  name        String?
  photo       String?
  lastMessage String?
  Message     Message[]
  users       ChatToUsers[]
}

model ChatToUsers {
  chatId     String
  userId     String
  assignedAt DateTime @default(now())
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatId, userId])
  @@index([userId], map: "chats_to_users_userId_fkey")
  @@map("chats_to_users")
}

model Message {
  id              String       @id @default(uuid())
  text            String       @default("")
  type            MessageTypes @default(text)
  fileUrl         String       @default("")
  userId          String?
  chatId          String?
  time            String
  date            DateTime     @default(now())
  replyMessageId  String?
  editedTime      String?
  isEdited        Boolean      @default(false)
  chat            Chat?        @relation(fields: [chatId], references: [id])
  replyMessage    Message?     @relation("MessageToMessage", fields: [replyMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToMessages Message[]    @relation("MessageToMessage")
  sender          User?        @relation(fields: [userId], references: [id])
  isReaded        Boolean      @default(false)

  @@index([chatId], map: "Message_chatId_fkey")
  @@index([replyMessageId], map: "Message_replyMessageId_fkey")
  @@index([userId], map: "Message_userId_fkey")
}

enum MessageTypes {
  text
  audio
  file
  reply
}
